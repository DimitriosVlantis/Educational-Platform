/*
    Layout sets the bsic structure for all pages.
    It makes pages look like a one column grid by default.
*/

main {
    grid-area: main;
}

footer {
    grid-area: foot;
}

aside {
    grid-area: aside;
}

/* As said the body is organized by a grid with main and foot
    on two different rows. This is for mobile devices as our 
    implementation follows the mobile first architecture.*/
body {
    display: grid;
    grid-auto-rows: auto;
    grid-template-columns: 100vw;
    grid-template-areas:
        "main"
        "foot";
}

/* In case there is an aside, the template changes as follows.*/
body.has-aside {
    grid-template-areas:
        "main"
        "aside"
        "foot";
    align-items: center;
    padding-top: 0;
}

/* The layout for small tablets and tablets is a little bit different since there is 
    slightly more space given. We make a two-column grid to organize the page.
    Of course by default it looks like one-column but this implementation comes in 
    handy when someone was to position elements using a grid (field.html) 
    or when someone was to completely ignore ti make it otherwise (index.html).
    It;s quite versatile*/
@media only screen and (min-width: 48em) {
    body {
        grid-template-columns: 1fr 1fr;
        grid-template-areas:
        "main main"
        "foot foot";
    }

    body.has-aside main .hero-section {
        grid-area: hero;
    }

    body.has-aside main .module {
        grid-area: module;
    }

    /* Here we brake the main even more down to an another
        two-column organization. This happens when aside exists.*/
    body.has-aside main {
        display: grid;
        grid-template:
            "hero hero" 100vh
            "module ." minmax(100vh, max-content)
            / 65% 10fr;
        row-gap: 2em;
    }

    /* Same as before in line 31, if there is an aside we
        have to count it too.*/
    body.has-aside {
        grid-template-columns: 65% 10fr;
        grid-template-rows: 100vh minmax(100vh, max-content) 0;
        grid-template-areas:
        "main main"
        "main main"
        ". aside"
        "foot foot";
    }

    /* Here aside takes place ont the right column.*/
    aside {
        grid-row: 2 / 4;
    }
}

/* Here we set the layout for small desktops in a similar way.*/
@media only screen and (min-width: 67.5em) {
    body {
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-areas:
        "main main main"
        "foot foot foot";
    }

    body.has-aside main {
        grid-template:
            "hero hero hero" 125vh
            "module module ." minmax(125vh, max-content)
                / 35% 25% 30fr;
    }

    body.has-aside {
        grid-template-columns: 35% 25% 30fr;
        grid-template-rows: 125vh minmax(125vh, max-content) 0;
        grid-template-areas:
            "main main main"
            "main main main"
            ". . aside"
            "foot foot foot";
    }
}

/* And last but not least we set the layout for normal desktops.*/
@media only screen and (min-width: 90em) {
    body {
        grid-template-columns: 1fr 32% 32% 32% 1fr;
        grid-template-areas:
            "main main main main main"
            "foot foot foot foot foot";
    }

    body.has-aside main {
        grid-template:
                ". hero hero hero hero" 100vh
                ". module module . ." minmax(100vh, max-content)
                / 1fr 30% 15% 20fr 1fr;
    }

    body.has-aside {
        grid-template-columns: 1fr 30% 30% 20fr 1fr;
        grid-template-areas:
            ". main main main main"
            ". main main main main"
            ". . . aside ."
            "foot foot foot foot foot";
    }
}